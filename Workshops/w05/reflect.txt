1) One of the advantages that I encountered in working with structs instead of parralel arrays was that the process of retreiving tubular data was much simpler to keep track of and implement. I appreciate that I was able to easily access and pull data from any member, of any number of structure instances, all the while referencing a single structure name. In making a set of parralel arrays into an array of structs, we were able to reduce the amount of coding, lower the number of variables and arrays required, and provides a cleaner looking, more easily maintained code. 
2) In declaring a struct data type in a header file, we give it global scope, meaning that it can now be included and instantiated by multiple C files - so long as they have permission to access the it. This is beneficial for numerous reasons and greatly contributes to the modularity of C programming. If we have multiple source files accessing a particular structure, we can declare that struct in a separate header file and simply use an "include" statement to reference it when required. This prevents the programmer from having to re-write the code for the struct at the beginning of every program that requires it. Furthermore, if the struct requires modification, one need only modify the header file to affect every program that references it, as opposed to going into each program source code file and modifying it per struct.  