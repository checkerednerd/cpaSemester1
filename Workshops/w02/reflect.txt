Ron Vincent

039567078

K



Workshop 2 At-Home Reflection




1) I believe the most important thing I learned in this workshop was that knowledge of data types – including what operations can 
be performed on each and how to cast the values into different data types – is of the utmost importance to building functioning, 
meaningful code. Coding syntax and algorithmic logic in a program can be sound, but if one of the data types is 
misdeclared/miscast/truncated/rounded/etc. improperly, the values will not represent the properly-working code. This can cause 
an extensive amount of time searching for bugs in code that do not exist, among other frustrations.



2) We add 0.005 to the value derived when calculating the GST to account for the truncation that occurs during. The result of 
the tax calculation will return a value with too many decimal places to accurately represent money - as a result, we must 
truncate the value to two decimal places (representing cents). However, when we truncate, a C standard compiler will not round
the lost value. For example, a value of 3.1474 would appear as 3.14, instead of being accurately rounded to 3.15. Adding 0.005 
to the result before truncation will account for this by forcing the value to increment if it would be rounded up, and remain 
the same if it were to be rounded down.



3) The result of a casting operation is a converted version of the operand passed to the casting statement. For Example, when 
we cast the amount of money entered from a double to an integer, the result is an integer version of the amount entered, 
which automatically gives us the number of loonies for our equation.



4) I think we were required to use the modulus operator in this workshop because although it would have been possible to complete 
it with division, there will be times in our future careers when we will require modulus in order to complete the task required 
of our code. In using modulus in this workshop, we used it to retrieve values, as well as cast them as integers in order to be 
able to use modulus – this implies that there is much that can be done with this operator.
